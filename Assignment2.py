import mysql.connector

def connect_to_database():
    try:
        conn = mysql.connector.connect(  # connection string to database
            host='localhost',
            port='3306',
            user='root',
            password='change-me',
            database='FSEEngStore'
        )
        return conn
    except mysql.connector.Error as e:
        print(f"Error connecting to MySQL: {e}")
        return None  # None is Python's null

# Write SQL queries to perform the following tasks (these should be menu
# option):
# • List all products that are out of stock.
def list_all_out_of_stock_products(conn):
    try:
        cursor = conn.cursor()
        query = "SELECT ProductName FROM Products WHERE UnitsinStock = 0"
        cursor.execute(query)
        print("Out of Stock:")
        for (ProductName) in cursor:
            name = ProductName[0]  # Extract the product name from the tuple
            print(f"- {name}")
    except mysql.connector.Error as e:
        print(f"Error fetching records: {e}")

# • Find the total number of orders placed by each customer.
def display_total_number_orders_per_customer(conn):
    try:
        cursor = conn.cursor()
        query = ("""SELECT COUNT(o.OrderID) AS TotalNumOrders, c.CustomerName
                 FROM Orders o 
                 JOIN Customers c 
                 WHERE o.CustomerID = c.CustomerID 
                 GROUP BY c.CustomerName""")
        cursor.execute(query)
        for (TotalNumOrders, CustomerName) in cursor:  # FIXME: fix print statement
            print(f"{CustomerName}: {TotalNumOrders} orders")
    except mysql.connector.Error as e:
        print(f"Error fetching records: {e}")


# • Display the details of the most expensive product ordered in each order.
def display_most_exp_product_details(conn):
        try:
            cursor = conn.cursor()
            query = ("""SELECT o.OrderID, p.ProductName, od.UnitPrice
                FROM OrderDetails od
                JOIN Orders o ON od.OrderID = o.OrderID
                JOIN Products p ON od.ProductID = p.ProductID
                WHERE (od.OrderID, od.UnitPrice) IN (
                    SELECT OrderID, MAX(UnitPrice)
                    FROM OrderDetails
                    GROUP BY OrderID
                );
            """)
            cursor.execute(query)
            for row in cursor:
                print(row)
        except mysql.connector.Error as e:
            print(f"Error fetching records: {e}")


# • Retrieve a list of products that have never been ordered.
def display_products_never_ordered(conn):
    try:
        cursor = conn.cursor()
        query = ("""SELECT p.ProductName AS PName
                    FROM Products p 
                    LEFT JOIN OrderDetails od 
                    ON p.ProductID = od.ProductID
                    WHERE od.ProductID IS NULL;
                 """)
        cursor.execute(query)
        print("Products That Have Never Been Ordered:")
        for (PName,) in cursor:  # Fixed print statement
            print(f"- {PName}")
    except mysql.connector.Error as e:
        print(f"Error fetching records: {e}")


# • Show the total revenue (price * quantity) generated by each supplier
def display_total_rev_by_supplier(conn):
    try:
        cursor = conn.cursor()
        query = ("""SELECT s.SupplierName AS SName, SUM(od.UnitPrice * od.Quantity) AS TotalRevenue
                   FROM OrderDetails od
                   JOIN Products p ON od.ProductID = p.ProductID
                   JOIN Suppliers s ON p.SupplierID = s.SupplierID
                   GROUP BY SName   
                """)
        cursor.execute(query)
        for (SName, TotalRevenue) in cursor:
            print(f"{SName} Total Revenue: ${TotalRevenue}")
    except mysql.connector.Error as e:
        print(f"Error fetching records: {e}")

def menu():
    conn = connect_to_database()
    isDone = True
    while isDone:
        print("""
                Which would you like to do?
                1. List all products that are out of stock.
                2. Find the total number of orders placed by each customer.
                3. Display the details of the most expensive product ordered in each order.
                4. Retrieve a list of products that have never been ordered.
                5. Show the total revenue (price * quantity) generated by each supplier.
                6. Update stock quantity of a product.
                7. Add a new order.
                8. Update stock quantity of a product.
                9. Exit
            """)
        response = input("Please enter a number 1-9: ")
        if response == "1":
            list_all_out_of_stock_products(conn)
        elif response == "2":
            display_total_number_orders_per_customer(conn)
        elif response == "3":
            display_most_exp_product_details(conn)
        elif response == "4":
            display_products_never_ordered(conn)
        elif response == "5":
            display_total_rev_by_supplier(conn)
        elif response == "6":
            update_stock_quantity(conn)
        elif response == "7":
            add_new_order(conn)
        elif response == "8":
            update_stock_quantity(conn)
        elif response == "9":
            print("Goodbye!")
            isDone = False
        else:
            print("\nNot a valid menu option.")
    conn.close()

def add_new_order(conn):

    # Collecting order details from the user
    customer_id = int(input("Enter Customer ID: "))
    order_date = input("Enter Order Date (YYYY-MM-DD): ")
    ship_date = input("Enter Ship Date (YYYY-MM-DD): ")
    ship_address = input("Enter Ship Address: ")
    ship_city = input("Enter Ship City: ")
    ship_postal_code = input("Enter Ship Postal Code: ")
    ship_country = input("Enter Ship Country: ")
    product_id = int(input("Enter Product ID: "))
    quantity = int(input("Enter Quantity: "))
    unit_price = float(input("Enter Unit Price: "))

    # Preparing and executing the stored procedure
    cursor = conn.cursor()
    cursor.callproc('AddNewOrder',
                    [customer_id, order_date, ship_date, ship_address, ship_city, ship_postal_code, ship_country,
                     product_id, quantity, unit_price])
    conn.commit()
    print("New order added successfully.")
    cursor.close()


def update_stock_quantity(conn):
    # Getting OrderID from the user
    order_id = int(input("Enter Order ID: "))

    # Executing the stored procedure
    cursor = conn.cursor()
    cursor.callproc('UpdateStockQuantity', [order_id])
    conn.commit()
    print("Stock quantity updated successfully.")
    cursor.close()


def main():
    menu()


if __name__ == "__main__":
    main()
